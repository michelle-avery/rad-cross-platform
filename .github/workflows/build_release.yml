name: Build and Release RAD Cross-Platform

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    outputs:
      apk_path: ${{ steps.build_apk.outputs.apk_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Generate App Icons
        run: flutter pub run flutter_launcher_icons

      - name: Check for signing secrets
        id: check_secrets
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && \
             [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && \
             [ -n "${{ secrets.KEY_ALIAS }}" ] && \
             [ -n "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "secrets_present=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_present=false" >> $GITHUB_OUTPUT
            echo "::warning::Signing secrets not found. Skipping release build signing."
          fi
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Decode Keystore & Create key.properties
        if: steps.check_secrets.outputs.secrets_present == 'true'
        run: |
          echo "Decoding Keystore..."
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          echo "Creating key.properties..."
          echo "storeFile=upload-keystore.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Build Android Release APK
        id: build_apk
        if: steps.check_secrets.outputs.secrets_present == 'true'
        run: |
          flutter build apk --release
          # Set output path
          echo "apk_path=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT

      - name: Upload Android APK Artifact
        if: steps.check_secrets.outputs.secrets_present == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: radcxp-android-apk
          path: ${{ steps.build_apk.outputs.apk_path }}
          retention-days: 7

  build-linux:
    name: Build Linux (Alpine/musl ARM64)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Generate App Icons
        run: flutter pub run flutter_launcher_icons

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Linux ARM64 Release using Script
        run: |
          chmod +x ./build_linux_arm.sh
          ./build_linux_arm.sh
          # The script outputs the bundle to ./build/linux/arm64/release/release/bundle

      - name: Upload Linux Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bundle
          path: ./build/linux/arm64/release/release/bundle
          retention-days: 7

  release:
    name: Package and Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-android, build-linux]
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Android APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: radcxp-android-apk
          path: ./apk-artifact

      - name: Download Linux Bundle Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-bundle
          path: ./linux-bundle

      - name: Package Linux ARM64 Artifacts
        id: package_linux
        run: |
          # Extract version from pubspec.yaml (e.g., 1.0.0+1 -> 1.0.0)
          APP_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
          echo "App Version: $APP_VERSION"
          # Define archive name with version and target specifics
          ARCHIVE_NAME="radcxp-linux-arm64-alpine-musl-v${APP_VERSION}.tar.gz"
          echo "Archive Name: $ARCHIVE_NAME"
          BUNDLE_DOWNLOAD_PATH="./linux-bundle"
          STAGING_DIR="./staging"
          TOP_LEVEL_DIR="remote_assist_display_cxp"
          echo "Bundle Download Path: $BUNDLE_DOWNLOAD_PATH"
          echo "Staging Directory: $STAGING_DIR"
          echo "Top Level Directory: $TOP_LEVEL_DIR"
          if [ ! -d "$BUNDLE_DOWNLOAD_PATH" ]; then
            echo "::error::Expected bundle directory not found at $BUNDLE_DOWNLOAD_PATH after download."
            exit 1
          fi
          mkdir -p "${STAGING_DIR}/${TOP_LEVEL_DIR}"
          cp -a "${BUNDLE_DOWNLOAD_PATH}/." "${STAGING_DIR}/${TOP_LEVEL_DIR}/"
          echo "Copying install.sh to staging area..."
          cp install.sh "${STAGING_DIR}/${TOP_LEVEL_DIR}/"
          tar -czvf ${ARCHIVE_NAME} -C ${STAGING_DIR} ${TOP_LEVEL_DIR}
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Validate Version Tag
        run: |
          # Extract version from pubspec.yaml (e.g., 1.0.0+1 -> 1.0.0)
          PUB_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | sed 's/+.*//')
          # Extract version from tag (e.g., refs/tags/v1.0.0 -> 1.0.0)
          TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')

          echo "Pubspec Version: $PUB_VERSION"
          echo "Tag Version: $TAG_VERSION"

          if [ "$PUB_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Tag version ($TAG_VERSION) does not match pubspec.yaml version ($PUB_VERSION)."
            exit 1
          fi
          echo "Version tag matches pubspec.yaml."

      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./apk-artifact/app-release.apk
            ${{ steps.package_linux.outputs.archive_name }}
